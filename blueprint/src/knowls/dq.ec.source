\subsection{Source of elliptic curve data over $\Q$}
\begin{definition}\label{dq.ec.source}
\uses{ec.complex_multiplication,ec.conductor,ec.isogeny,ec.q.integral_points,ec.q.torsion_growth,ec.rank,lfunction}
The elliptic curves over $\Q$ in the LMFDB come from three sources:
<ul>
<li>
Complete lists of elliptic curves defined over $\Q$ for a given {{KNOWL('ec.conductor', 'conductor')}} $N$ were computed for $N\le500000$ by John Cremona using the modular symbols method described in \cite{href{http://homepages.warwick.ac.uk/~masgaj/book/fulltext/index.html}{Cremona97}, MR1628193}, as implemented in his eclib package \cite{doi:10.5281/zenodo.29671}.
<li>
For conductors only divisible by primes $p\le7$, complete lists of curves were computed by Benjamin Matschke and Rafael von
K\"anel by solving appropriate $S$-unit equations \cite{arxiv:1605.06079}, and independently by Michael Bennett, Adela Gherga, and Andrew Rechnitzer \cite{href{https://www.ams.org/journals/mcom/2019-88-317/S0025-5718-2018-03370-1/}{BGR2019}}.
<li>
For prime conductors, extensive but incomplete lists of curves were computed by William Stein and Mark Watkins as part of the Stein-Watkins database \cite{href{http://modular.math.washington.edu/papers/stein-watkins/}{SW2002}}.  Independently, complete lists were computed by Bennett, Gherga and Rechnitzer \cite{href{https://www.ams.org/journals/mcom/2019-88-317/S0025-5718-2018-03370-1/}{BGR2019}}, both extending the range of the Stein-Watkins table and including curves omitted there.
</ul>

The additional data for each curve and {{KNOWL('ec.isogeny', 'isogeny')}} class was also computed by John Cremona using a combination of eclib, Magma, SageMath, and Pari/GP unless otherwise
specified.

-  Isogeny classes were computed using with eclib or Sage, which uses
methods of Cremona, Tsukazaki and Watkins to compute isogenies of
prime degree.
-  The ranks and generators were mostly computed using
mwrank (part of eclib), with larger generators of {{KNOWL('ec.rank', 'rank')}} 1 curves
computed using either Pari/GP's ellheegner function (implemented by
Bill Allombert using his enhancements of the algorithm developed by
John Cremona, Christophe Delaunay and Mark Watkins) or Magma's
HeegnerPoint function (implemented by Steve Donnelly and Mark Watkins,
based on the same method).
-   {{KNOWL('ec.q.integral_points', 'Integral points')}} were computed using both the
Sage implementation of the method based on bounds on elliptic
logarithms and LLL-reduction, implemented by John Cremona with Michael
Mardaus and Tobias Nagell, and also the Magma implementation of Steve Donnelly (which uses some additional unpublished ideas)
-   Modular degrees were computed using Mark Watkins's sympow library via Sage.
-   Special values of the {{KNOWL('lfunction', 'L-function')}} were computed by Pari/GP via Sage.
-   Information on mod-$l$ Galois representations was computed by Andrew Sutherland using the methods of
\cite{doi:10.1017/fms.2015.33,arXiv:1504.07618} (including a generalization to handle curves with {{KNOWL('ec.complex_multiplication','complex multiplication')}}).
-   Information on 2-adic Galois Representations was computed using Jeremy Rouse's Magma implementation of the algorithm of Rouse and Zureick-Brown \cite{doi:10.1007/s40993-015-0013-7,arXiv:1402.5997}.
-  The graphs of the real locus were computed using David Roe's function implemented in Sage.
- Iwasawa invariants were computed by Robert Pollack.
- {{KNOWL('ec.q.torsion_growth', 'Torsion growth')}} data was computed by Enrique Gonz&aacute;lez Jim&eacute;nez and Filip Najman.



\end{definition}


